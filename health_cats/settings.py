"""
Django settings for health_cats project.

Generated by 'django-admin startproject' using Django 4.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import dj_database_url
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY','django-insecure-%29&d4-mohrru+3*p%$^439+bw(d7g37xp=nu_qld8gmoyuum2')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True') == 'True'

ALLOWED_HOSTS = []
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)


# Application definition

INSTALLED_APPS = [
    # 第三方套件，Cloudinary 相關的放最前面
    'cloudinary_storage',
    'django.contrib.staticfiles', # 【已修正】確保它只出現一次，並緊跟在 cloudinary_storage 之後
    'cloudinary',

    # Django REST Framework 相關
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',

    # 您自己的 Apps
    'accounts.apps.AccountsConfig', # 建議使用完整的 AppConfig 路徑
    'pets.apps.PetsConfig',       # 建議使用完整的 AppConfig 路徑

    # Django 內建 Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'health_cats.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'health_cats.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}',
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==============================================================================
# CORS 設定
# ==============================================================================

# 允許跨來源請求的來源列表
CORS_ALLOWED_ORIGINS = [
    # 因為你是從本地端檔案 (`file://`) 開啟測試頁，其來源是 "null"
    "null",
    # 未來如果你的前端部署在其他地方，也要把那個網址加進來
    # 例如 React 開發伺服器: "http://localhost:3000"
]

# 如果你想在開發時允許所有來源 (較不安全，但方便)
# CORS_ALLOW_ALL_ORIGINS = True

# 允許前端在請求中攜帶的非標準 Header
# 我們的 JS Code 發送了 'Authorization'，所以必須允許它
CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type',
]

# settings.py

# ... (檔案底部，可以在 CORS 設定的上方或下方)

# ==============================================================================
# Django REST Framework 設定
# ==============================================================================
REST_FRAMEWORK = {
    # 設定預設的驗證方式
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 告訴 DRF 我們要使用 Token 來驗證使用者身份
        'rest_framework.authentication.TokenAuthentication',
    ],
    # 這裡也可以設定全域的預設權限，要求所有 API 都必須登入才能存取
    # 這是一個好的安全實踐
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}
# ==============================================================================
# Media Files (User-uploaded files) 設定
# https://docs.djangoproject.com/en/4.2/howto/static-files/#serving-files-uploaded-by-a-user-during-development
# ==============================================================================

# 瀏覽器存取媒體檔案時使用的 URL 前綴
# MEDIA_URL = '/media/'

# 伺服器上儲存媒體檔案的實際檔案系統路徑
# 這會在你的專案根目錄下建立一個名為 'media' 的資料夾
# MEDIA_ROOT = BASE_DIR / 'media'

# 【新增】Cloudinary 的設定
# 只有當 DEBUG=False (在生產環境中) 時，才使用 Cloudinary
if not DEBUG:
    CLOUDINARY_STORAGE = {
        'CLOUD_NAME': os.environ.get('CLOUDINARY_CLOUD_NAME'),
        'API_KEY': os.environ.get('CLOUDINARY_API_KEY'),
        'API_SECRET': os.environ.get('CLOUDINARY_API_SECRET'),
    }
    # 告訴 Django，預設的檔案儲存系統現在是 Cloudinary
    DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
else:
    # 在本地開發時，繼續使用原本的檔案系統
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
